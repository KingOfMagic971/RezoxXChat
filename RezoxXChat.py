# -*- coding: utf-8 -*-
# meta developer: @Rezoxss
# scope: hikka_only

from .. import loader, utils
import logging
import time
import asyncio
import re
from typing import List, Dict, Optional, Tuple
from telethon.tl.types import Message, User, ChannelParticipantsAdmins, ChatBannedRights, Channel
from telethon.tl.functions.channels import EditBannedRequest, EditPhotoRequest, TogglePreHistoryHiddenRequest
from telethon.tl.functions.messages import EditChatDefaultBannedRightsRequest
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

@loader.tds
class RezoChatMod(loader.Module):
    """RezoChat - –ø—Ä–µ–º–∏—É–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–Ω—Ç–∏-—Ä–µ–π–¥–æ–º"""
    
    strings = {
        "name": "RezoChat",
        "version": "RezoChat v17.0.0 by @Rezoxss",
        "not_admin": "‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "no_reply": "‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "no_user": "‚ùå –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "success": "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "error": "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        "no_fed": "‚ùå –§–µ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        "user_not_found": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "no_warns": "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç",
        "chat_locked": "üîí –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç –æ—Ç —Ä–µ–π–¥–∞",
        "chat_unlocked": "üîì –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç",
        "raid_stopped": "üõ°Ô∏è –†–µ–π–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "log_chat",
                None,
                "ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤",
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "warn_limit",
                3,
                "–õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –±–∞–Ω–æ–º",
                validator=loader.validators.Integer(minimum=1, maximum=10)
            ),
            loader.ConfigValue(
                "anti_raid",
                True,
                "–í–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏-—Ä–µ–π–¥ —Å–∏—Å—Ç–µ–º—É",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "raid_timeout",
                60,
                "–¢–∞–π–º–∞—É—Ç –∞–Ω—Ç–∏-—Ä–µ–π–¥–∞ (—Å–µ–∫—É–Ω–¥—ã)",
                validator=loader.validators.Integer(minimum=10, maximum=300)
            ),
            loader.ConfigValue(
                "raid_threshold", 
                500,
                "–ü–æ—Ä–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω—Ç–∏-—Ä–µ–π–¥–∞",
                validator=loader.validators.Integer(minimum=2, maximum=500)
            ),
            loader.ConfigValue(
                "lock_on_raid",
                True,  # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –∑–∞–∫—Ä—ã–≤–∞—Ç—å —á–∞—Ç –ø—Ä–∏ —Ä–µ–π–¥–µ
                "–ó–∞–∫—Ä—ã–≤–∞—Ç—å —á–∞—Ç –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ä–µ–π–¥–∞",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "auto_unlock",
                300,
                "–ê–≤—Ç–æ-—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)",
                validator=loader.validators.Integer(minimum=60, maximum=3600)
            ),
            loader.ConfigValue(
                "premium_stickers",
                True,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π",
                validator=loader.validators.Boolean()
            )
        )
        self.warns = {}
        self.federations = {}
        self.notes = {}
        self.last_joins = {}
        self.fed_admins = {}
        self.fed_bans = {}
        self.locked_chats = set()
        self.premium_stickers = {
            "ban": "CAACAgIAAxkBAAE",  # –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä –±–∞–Ω–∞
            "kick": "CAACAgIAAxkBAAE",  # –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä –∫–∏–∫–∞
            "mute": "CAACAgIAAxkBAAE",  # –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä –º—É—Ç–∞
            "warn": "CAACAgIAAxkBAAE",  # –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä –≤–∞—Ä–Ω–∞
            "success": "CAACAgIAAxkBAAE"  # –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä —É—Å–ø–µ—Ö–∞
        }

    async def client_ready(self, client, db):
        self._client = client

    def get_premium_sticker(self, action: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è"""
        if self.config["premium_stickers"]:
            return self.premium_stickers.get(action)
        return None

    async def send_action_message(self, message: Message, action: str, username: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º"""
        action_messages = {
            "ban": f"üî® {username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.",
            "kick": f"üçÉ {username} –±—ã–ª –∫–∏–∫–Ω—É—Ç.",  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "–∫–∏–∫–Ω—É—Ç"
            "mute": f"üîá {username} –±—ã–ª –∑–∞–º—É—á–µ–Ω.",
            "warn": f"‚ö†Ô∏è {username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.",
            "unban": f"‚úÖ {username} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.",
            "unmute": f"‚úÖ {username} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω."
        }
        
        sticker = self.get_premium_sticker(action)
        if sticker:
            await message.reply(file=sticker)
        
        await message.reply(action_messages.get(action, f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è {username}"))

    async def lock_chat(self, chat_id: int):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –æ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            await self._client(TogglePreHistoryHiddenRequest(
                channel=await self._client.get_entity(chat_id),
                enabled=True
            ))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            banned_rights = ChatBannedRights(
                until_date=None,
                send_messages=True,
                send_media=True,
                send_stickers=True,
                send_gifs=True,
                send_games=True,
                send_inline=True,
                send_polls=True,
                change_info=True,
                invite_users=True,
                pin_messages=True,
            )
            
            await self._client(EditChatDefaultBannedRightsRequest(
                peer=await self._client.get_entity(chat_id),
                banned_rights=banned_rights
            ))
            
            self.locked_chats.add(chat_id)
            logger.info(f"–ß–∞—Ç {chat_id} –∑–∞–∫—Ä—ã—Ç –æ—Ç —Ä–µ–π–¥–∞")
            
            # –ê–≤—Ç–æ-—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            if self.config["auto_unlock"] > 0:
                asyncio.create_task(self.auto_unlock_chat(chat_id))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞: {e}")

    async def auto_unlock_chat(self, chat_id: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —á–∞—Ç —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è"""
        await asyncio.sleep(self.config["auto_unlock"])
        await self.unlock_chat(chat_id)

    async def unlock_chat(self, chat_id: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —á–∞—Ç"""
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            await self._client(TogglePreHistoryHiddenRequest(
                channel=await self._client.get_entity(chat_id),
                enabled=False
            ))
            
            # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            banned_rights = ChatBannedRights(
                until_date=None,
                send_messages=False,
                send_media=False,
                send_stickers=False,
                send_gifs=False,
                send_games=False,
                send_inline=False,
                send_polls=False,
                change_info=False,
                invite_users=False,
                pin_messages=False,
            )
            
            await self._client(EditChatDefaultBannedRightsRequest(
                peer=await self._client.get_entity(chat_id),
                banned_rights=banned_rights
            ))
            
            self.locked_chats.discard(chat_id)
            logger.info(f"–ß–∞—Ç {chat_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞: {e}")

    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–º–Ω—ã–π –∞–Ω—Ç–∏-—Ä–µ–π–¥
    @loader.command()
    async def smartraid(self, message):
        """–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏-—Ä–µ–π–¥–∞ - .smartraid <on/off/status>"""
        args = utils.get_args_raw(message).lower()
        
        if not args:
            status = "‚úÖ –í–∫–ª" if self.config["anti_raid"] else "‚ùå –í—ã–∫–ª"
            lock_status = "‚úÖ –í–∫–ª" if self.config["lock_on_raid"] else "‚ùå –í—ã–∫–ª"
            
            status_text = (
                f"üõ°Ô∏è –£–º–Ω—ã–π –∞–Ω—Ç–∏-—Ä–µ–π–¥:\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {status}\n"
                f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞: {lock_status}\n"
                f"‚Ä¢ –ü–æ—Ä–æ–≥: {self.config['raid_threshold']} users\n"
                f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {self.config['raid_timeout']}s\n"
                f"‚Ä¢ –ê–≤—Ç–æ-—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {self.config['auto_unlock']}s\n\n"
                f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {len(self.locked_chats)}\n"
                f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .smartraid on/off/lock/unlock"
            )
            await utils.answer(message, status_text)
            return
            
        if args == "on":
            self.config["anti_raid"] = True
            await utils.answer(message, "‚úÖ –£–º–Ω—ã–π –∞–Ω—Ç–∏-—Ä–µ–π–¥ –≤–∫–ª—é—á–µ–Ω")
        elif args == "off":
            self.config["anti_raid"] = False
            await utils.answer(message, "‚ùå –£–º–Ω—ã–π –∞–Ω—Ç–∏-—Ä–µ–π–¥ –≤—ã–∫–ª—é—á–µ–Ω")
        elif args == "lock":
            self.config["lock_on_raid"] = True
            await utils.answer(message, "‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–π–¥–µ –≤–∫–ª—é—á–µ–Ω–∞")
        elif args == "unlock":
            self.config["lock_on_raid"] = False
            await utils.answer(message, "‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–π–¥–µ –≤—ã–∫–ª—é—á–µ–Ω–∞")
        elif args == "status":
            locked_chats_info = "\n".join([f"‚Ä¢ {chat}" for chat in list(self.locked_chats)[:5]])
            if len(self.locked_chats) > 5:
                locked_chats_info += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(self.locked_chats) - 5}"
                
            await utils.answer(message, f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã:\n{locked_chats_info}")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä–∞–º–∏
    @loader.command()
    async def rkick(self, message):
        """–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - .rkick [—é–∑–µ—Ä]"""
        user = await self.get_user(message)
        if not user:
            await utils.answer(message, self.strings("no_user"))
            return
            
        try:
            await self._client.kick_participant(message.chat_id, user.id)
            await self.send_action_message(message, "kick", f"@{user.username}" if user.username else user.first_name)
            await self.log_action("KICK", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @loader.command()
    async def rban(self, message):
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - .rban [—é–∑–µ—Ä]"""
        user = await self.get_user(message)
        if not user:
            await utils.answer(message, self.strings("no_user"))
            return
            
        try:
            await self._client.edit_permissions(
                message.chat_id,
                user.id,
                view_messages=False
            )
            await self.send_action_message(message, "ban", f"@{user.username}" if user.username else user.first_name)
            await self.log_action("BAN", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @loader.command()
    async def rmute(self, message):
        """–ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - .rmute [—é–∑–µ—Ä] [–≤—Ä–µ–º—è]"""
        args = utils.get_args_raw(message).split()
        user = await self.get_user(message, args[0] if args else None)
        
        if not user:
            await utils.answer(message, self.strings("no_user"))
            return
            
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1h, 30m, 2d)
        mute_time = 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        if len(args) > 1:
            mute_time = self.parse_time(args[1])
            
        try:
            until_date = datetime.now() + timedelta(seconds=mute_time)
            await self._client.edit_permissions(
                message.chat_id,
                user.id,
                send_messages=False,
                until_date=until_date
            )
            await self.send_action_message(message, "mute", f"@{user.username}" if user.username else user.first_name)
            await self.log_action("MUTE", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {mute_time} —Å–µ–∫")
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def parse_time(self, time_str: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–µ–∫—É–Ω–¥—ã"""
        time_units = {
            's': 1, 'sec': 1, '—Å–µ–∫': 1,
            'm': 60, 'min': 60, '–º–∏–Ω': 60, 
            'h': 3600, 'hour': 3600, '—á–∞—Å': 3600,
            'd': 86400, 'day': 86400, '–¥–µ–Ω—å': 86400
        }
        
        match = re.match(r'(\d+)\s*([a-zA-Z–∞-—è–ê-–Ø]+)', time_str.lower())
        if match:
            amount, unit = match.groups()
            return int(amount) * time_units.get(unit, 60)
        
        return 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å

    @loader.watcher()
    async def anti_raid_watcher(self, message):
        """–£–º–Ω—ã–π –∞–Ω—Ç–∏-—Ä–µ–π–¥ –≤–∞—Ç—á–µ—Ä —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —á–∞—Ç–∞"""
        if not self.config["anti_raid"]:
            return
            
        if hasattr(message, 'action') and message.action:
            chat_id = utils.get_chat_id(message)
            current_time = time.time()
            
            if chat_id not in self.last_joins:
                self.last_joins[chat_id] = []
            
            self.last_joins[chat_id].append(current_time)
            self.last_joins[chat_id] = [
                t for t in self.last_joins[chat_id] 
                if current_time - t < self.config["raid_timeout"]
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —Ä–µ–π–¥–∞
            if len(self.last_joins[chat_id]) >= self.config["raid_threshold"]:
                await self.log_action("RAID_DETECTED", 
                                   f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–π–¥ –≤ —á–∞—Ç–µ {chat_id}\n"
                                   f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(self.last_joins[chat_id])}")
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —á–∞—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                if self.config["lock_on_raid"] and chat_id not in self.locked_chats:
                    await self.lock_chat(chat_id)
                    await message.reply("üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–π–¥! –ß–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç.")

    async def on_unload(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —á–∞—Ç—ã –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ"""
        for chat_id in self.locked_chats.copy():
            await self.unlock_chat(chat_id)
